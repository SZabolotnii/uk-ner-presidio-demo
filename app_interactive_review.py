# ui/interactive_review.py
"""
Interactive Review Interface: Human-in-the-Loop DeID

Architecture Strategy: Hybrid approach combining native Gradio
with enhanced user experience for manual entity confirmation.

Design Pattern: Two-Stage Workflow
1. Automatic Detection ‚Üí Visual Review
2. Manual Confirmation ‚Üí Selective Anonymization

Extensibility: Foundation for future custom JS components

FIX: Added cache_examples=False to gr.Examples() for Gradio 4.26.0 compatibility
"""

import logging
from typing import List, Tuple, Dict, Optional
import gradio as gr
from dataclasses import dataclass

from core.analyzer import HybridAnalyzer, AnalysisResult
from presidio_analyzer import RecognizerResult

logger = logging.getLogger(__name__)


@dataclass
class EntityReviewItem:
    """
    Structured representation –¥–ª—è review UI
    
    Design: Immutable data object –¥–ª—è client-server communication
    """
    index: int
    entity_type: str
    text: str
    start: int
    end: int
    confidence: float
    confirmed: bool = True  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞


class InteractiveReviewUI:
    """
    Enhanced UI for manual review and confirmation of detected entities
    
    Architecture Principle: Separation of Concerns
    - Detection: Delegated to HybridAnalyzer
    - Review: UI-specific logic (this class)
    - Anonymization: Delegated back to analyzer with filtered entities
    """
    
    # Color scheme –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Å—Ç–∞–Ω—ñ–≤
    COLOR_MAP = {
        "PERS": "#90EE90",      # Light green
        "ORG": "#87CEEB",       # Sky blue
        "LOC": "#FFB6C1",       # Light pink
        "EMAIL_ADDRESS": "#DDA0DD",  # Plum
        "PHONE_NUMBER": "#F0E68C",   # Khaki
        "IBAN_CODE": "#FFA07A",      # Light salmon
    }
    
    DEFAULT_COLOR = "#B0E0E6"  # Powder blue
    
    def __init__(self, analyzer: HybridAnalyzer):
        self.analyzer = analyzer
    
    def build_interface(self) -> gr.Blocks:
        """
        Constructs full interactive review interface
        
        UX Strategy: Progressive disclosure
        - Step 1: Simple input + detect
        - Step 2: Visual review with controls
        - Step 3: Selective anonymization
        """
        with gr.Blocks(
            title="–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–µ—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó",
            theme=gr.themes.Soft()
        ) as interface:
            
            gr.Markdown(
                """
                # üîç –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–µ—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
                
                **Human-in-the-Loop –ø—ñ–¥—Ö—ñ–¥**: –í–∏ –∫–æ–Ω—Ç—Ä–æ–ª—é—î—Ç–µ —â–æ –∞–Ω–æ–Ω—ñ–º—ñ–∑—É–≤–∞—Ç–∏
                
                ### –Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:
                1. –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å **"–ó–Ω–∞–π—Ç–∏ —Å—É—Ç–Ω–æ—Å—Ç—ñ"**
                2. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –¥–∞–Ω—ñ –∑ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è–º
                3. **–ó–Ω—ñ–º—ñ—Ç—å –≥–∞–ª–æ—á–∫–∏** –∑ —Ç–∏—Ö —Å—É—Ç–Ω–æ—Å—Ç–µ–π, —è–∫—ñ –ù–ï –ø–æ—Ç—Ä—ñ–±–Ω–æ –∞–Ω–æ–Ω—ñ–º—ñ–∑—É–≤–∞—Ç–∏
                4. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å **"–ê–Ω–æ–Ω—ñ–º—ñ–∑—É–≤–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ"**
                """
            )
            
            # === STATE MANAGEMENT ===
            detected_entities_state = gr.State([])  # List[RecognizerResult]
            review_items_state = gr.State([])       # List[EntityReviewItem]
            
            # === STEP 1: INPUT ===
            with gr.Group():
                gr.Markdown("### –ö—Ä–æ–∫ 1: –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç")
                input_text = gr.Textbox(
                    label="–¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É",
                    placeholder="–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ (ivan@example.com) –ø—Ä–∞—Ü—é—î –≤ –¢–û–í '–ü—Ä–∏–≤–∞—Ç'...",
                    lines=8
                )
                
                detect_btn = gr.Button(
                    "üîé –ó–Ω–∞–π—Ç–∏ —Å—É—Ç–Ω–æ—Å—Ç—ñ",
                    variant="primary",
                    size="lg"
                )
            
            # === STEP 2: REVIEW ===
            with gr.Group(visible=False) as review_section:
                gr.Markdown("### –ö—Ä–æ–∫ 2: –ü–µ—Ä–µ–≥–ª—è–¥ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Å—É—Ç–Ω–æ—Å—Ç–µ–π")
                
                with gr.Row():
                    # Left: Original with highlighting
                    with gr.Column(scale=1):
                        gr.Markdown("**–û—Ä–∏–≥—ñ–Ω–∞–ª –∑ –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è–º:**")
                        highlighted_display = gr.HighlightedText(
                            label="",
                            color_map=self.COLOR_MAP,
                            show_legend=True
                        )
                    
                    # Right: Confirmation checklist
                    with gr.Column(scale=1):
                        gr.Markdown(
                            "**–í–∏–±–µ—Ä—ñ—Ç—å —â–æ –∞–Ω–æ–Ω—ñ–º—ñ–∑—É–≤–∞—Ç–∏:**\n\n"
                            "‚úÖ –ì–∞–ª–æ—á–∫–∞ = –∞–Ω–æ–Ω—ñ–º—ñ–∑—É–≤–∞—Ç–∏  \n"
                            "‚ùå –ë–µ–∑ –≥–∞–ª–æ—á–∫–∏ = –∑–∞–ª–∏—à–∏—Ç–∏ —è–∫ —î"
                        )
                        
                        entities_checklist = gr.CheckboxGroup(
                            label="",
                            choices=[],
                            value=[],
                            interactive=True
                        )
                        
                        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                        detection_stats = gr.Markdown("")
                
                anonymize_btn = gr.Button(
                    "‚úÖ –ê–Ω–æ–Ω—ñ–º—ñ–∑—É–≤–∞—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ",
                    variant="primary",
                    size="lg"
                )
            
            # === STEP 3: RESULT ===
            with gr.Group(visible=False) as result_section:
                gr.Markdown("### –ö—Ä–æ–∫ 3: –†–µ–∑—É–ª—å—Ç–∞—Ç")
                
                with gr.Row():
                    original_output = gr.Textbox(
                        label="–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç",
                        lines=8,
                        interactive=False
                    )
                    
                    anonymized_output = gr.Textbox(
                        label="üîí –ê–Ω–æ–Ω—ñ–º—ñ–∑–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç",
                        lines=8,
                        show_copy_button=True,
                        interactive=False
                    )
                
                anonymization_summary = gr.Markdown("")
            
            # === EVENT HANDLERS ===
            
            # Detection workflow
            detect_btn.click(
                fn=self.detect_entities,
                inputs=[input_text],
                outputs=[
                    highlighted_display,
                    entities_checklist,
                    detection_stats,
                    review_section,
                    detected_entities_state,
                    review_items_state
                ]
            )
            
            # Anonymization workflow
            anonymize_btn.click(
                fn=self.selective_anonymize,
                inputs=[
                    input_text,
                    detected_entities_state,
                    entities_checklist
                ],
                outputs=[
                    original_output,
                    anonymized_output,
                    anonymization_summary,
                    result_section
                ]
            )
            
            # === EXAMPLES ===
            # ‚úÖ FIX: Added cache_examples=False for Gradio 4.26.0 compatibility
            gr.Examples(
                examples=[
                    "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ (ivan.petrenko@example.com) –ø—Ä–∞—Ü—é—î –≤ –¢–û–í '–ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫'. –¢–µ–ª–µ—Ñ–æ–Ω: +380501234567",
                    "–ü–ª–∞—Ç—ñ–∂–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: UA213223130000026007233566001. –ö–∞—Ä—Ç–∫–∞: 4111111111111111",
                    "–ó—É—Å—Ç—Ä—ñ—á –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è 15 –±–µ—Ä–µ–∑–Ω—è 2024 –æ 14:30 –≤ –ö–∏—î–≤—ñ –Ω–∞ –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 22"
                ],
                inputs=input_text,
                cache_examples=False  # ‚úÖ CRITICAL: Required for Gradio 4.26.0 without fn/outputs
            )
        
        return interface
    
    def detect_entities(
        self,
        text: str
    ) -> Tuple:
        """
        Stage 1: Detect and prepare for review
        
        Returns:
            Tuple with all necessary outputs for UI update
        """
        if not text or not text.strip():
            return (
                [],  # highlighted_display
                gr.update(choices=[], value=[]),  # checklist
                "‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É",  # stats
                gr.update(visible=False),  # review_section
                [],  # entities_state
                []   # review_items_state
            )
        
        try:
            # –í–∏–∫–æ–Ω—É—î–º–æ –∞–Ω–∞–ª—ñ–∑
            result: AnalysisResult = self.analyzer.analyze(text)
            
            if result.entities_count == 0:
                return (
                    [(text, None)],
                    gr.update(choices=[], value=[]),
                    "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                    gr.update(visible=False),
                    [],
                    []
                )
            
            # Prepare highlighted text
            highlighted_data = self._build_highlighted_data(text, result.entities)
            
            # Prepare checklist with detailed info
            checklist_data, review_items = self._build_checklist_data(
                text, 
                result.entities
            )
            
            # Stats
            stats = self._format_detection_stats(result)
            
            # Default: all entities selected
            default_selection = [item.index for item in review_items]
            
            return (
                highlighted_data,
                gr.update(
                    choices=checklist_data,
                    value=default_selection
                ),
                stats,
                gr.update(visible=True),
                result.entities,
                review_items
            )
            
        except Exception as e:
            logger.error(f"Detection failed: {e}", exc_info=True)
            return (
                [],
                gr.update(choices=[], value=[]),
                f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}",
                gr.update(visible=False),
                [],
                []
            )
    
    def selective_anonymize(
        self,
        original_text: str,
        all_entities: List[RecognizerResult],
        selected_indices: List[int]
    ) -> Tuple:
        """
        Stage 2: Anonymize only confirmed entities
        
        Architecture Pattern: Selective Processing
        """
        if not selected_indices:
            summary = (
                "‚ö†Ô∏è **–ñ–æ–¥–Ω–∞ —Å—É—Ç–Ω—ñ—Å—Ç—å –Ω–µ –≤–∏–±—Ä–∞–Ω–∞**\n\n"
                "–¢–µ–∫—Å—Ç –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω."
            )
            return (
                original_text,
                original_text,
                summary,
                gr.update(visible=True)
            )
        
        try:
            # –§—ñ–ª—å—Ç—Ä—É—î–º–æ entities
            confirmed_entities = [
                all_entities[idx] for idx in selected_indices
            ]
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ operators
            operators = {
                entity.entity_type: self.analyzer._create_operator(entity.entity_type)
                for entity in confirmed_entities
            }
            
            # –ê–Ω–æ–Ω—ñ–º—ñ–∑—É—î–º–æ
            anonymized = self.analyzer._anonymize(
                original_text,
                confirmed_entities,
                operators
            )
            
            # Summary
            summary = self._format_anonymization_summary(
                len(all_entities),
                len(confirmed_entities),
                confirmed_entities
            )
            
            return (
                original_text,
                anonymized,
                summary,
                gr.update(visible=True)
            )
            
        except Exception as e:
            logger.error(f"Anonymization failed: {e}", exc_info=True)
            return (
                original_text,
                "",
                f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–æ–Ω—ñ–º—ñ–∑–∞—Ü—ñ—ó: {str(e)}",
                gr.update(visible=True)
            )
    
    # === HELPER METHODS ===
    
    def _build_highlighted_data(
        self,
        text: str,
        entities: List[RecognizerResult]
    ) -> List[Tuple[str, Optional[str]]]:
        """
        Formats data for gr.HighlightedText
        
        Returns list of (text_chunk, entity_label) tuples
        """
        sorted_entities = sorted(entities, key=lambda x: x.start)
        
        highlighted = []
        last_pos = 0
        
        for entity in sorted_entities:
            # Text before entity
            if entity.start > last_pos:
                highlighted.append((text[last_pos:entity.start], None))
            
            # Entity with label
            entity_text = text[entity.start:entity.end]
            highlighted.append((entity_text, entity.entity_type))
            
            last_pos = entity.end
        
        # Remaining text
        if last_pos < len(text):
            highlighted.append((text[last_pos:], None))
        
        return highlighted
    
    def _build_checklist_data(
        self,
        text: str,
        entities: List[RecognizerResult]
    ) -> Tuple[List[Tuple[str, int]], List[EntityReviewItem]]:
        """
        Prepares data for checkbox group
        
        Returns:
            - choices: List of (label, value) for gr.CheckboxGroup
            - review_items: Structured data for state management
        """
        choices = []
        review_items = []
        
        for idx, entity in enumerate(entities):
            entity_text = text[entity.start:entity.end]
            
            # Human-readable label
            label = (
                f"[{entity.entity_type}] '{entity_text}' "
                f"(–ø–æ–∑. {entity.start}-{entity.end}, {entity.score:.0%})"
            )
            
            choices.append((label, idx))
            
            review_items.append(EntityReviewItem(
                index=idx,
                entity_type=entity.entity_type,
                text=entity_text,
                start=entity.start,
                end=entity.end,
                confidence=entity.score
            ))
        
        return choices, review_items
    
    def _format_detection_stats(self, result: AnalysisResult) -> str:
        """Formats detection statistics"""
        # Group by type
        by_type = {}
        for entity in result.entities:
            if entity.entity_type not in by_type:
                by_type[entity.entity_type] = 0
            by_type[entity.entity_type] += 1
        
        stats_lines = [
            f"**–ó–Ω–∞–π–¥–µ–Ω–æ: {result.entities_count} —Å—É—Ç–Ω–æ—Å—Ç–µ–π**\n",
            "–†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Ç–∏–ø–∞—Ö:"
        ]
        
        for entity_type, count in sorted(by_type.items()):
            stats_lines.append(f"- {entity_type}: {count}")
        
        return "\n".join(stats_lines)
    
    def _format_anonymization_summary(
        self,
        total: int,
        anonymized: int,
        entities: List[RecognizerResult]
    ) -> str:
        """Formats anonymization summary"""
        kept = total - anonymized
        
        summary = [
            "### ‚úÖ –ê–Ω–æ–Ω—ñ–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n",
            f"**–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**",
            f"- –ó–Ω–∞–π–¥–µ–Ω–æ —Å—É—Ç–Ω–æ—Å—Ç–µ–π: {total}",
            f"- –ê–Ω–æ–Ω—ñ–º—ñ–∑–æ–≤–∞–Ω–æ: {anonymized}",
            f"- –ó–∞–ª–∏—à–µ–Ω–æ –±–µ–∑ –∑–º—ñ–Ω: {kept}",
        ]
        
        if anonymized > 0:
            summary.append("\n**–ê–Ω–æ–Ω—ñ–º—ñ–∑–æ–≤–∞–Ω—ñ —Ç–∏–ø–∏:**")
            by_type = {}
            for entity in entities:
                if entity.entity_type not in by_type:
                    by_type[entity.entity_type] = 0
                by_type[entity.entity_type] += 1
            
            for entity_type, count in sorted(by_type.items()):
                summary.append(f"- {entity_type}: {count}")
        
        return "\n".join(summary)


# === INTEGRATION POINT ===

def create_interactive_review_interface(analyzer: HybridAnalyzer) -> gr.Blocks:
    """
    Factory function for easy integration
    
    Usage in app.py:
        from ui.interactive_review import create_interactive_review_interface
        interface = create_interactive_review_interface(analyzer)
        interface.launch()
    """
    ui = InteractiveReviewUI(analyzer)
    return ui.build_interface()