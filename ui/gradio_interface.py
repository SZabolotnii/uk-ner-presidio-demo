"""
–ì—Ä–∞–¥io —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º–∏ –¥–µ—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.

–ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥—ñ—è: –í—ñ–¥–æ–∫—Ä–µ–º–ª–µ–Ω–Ω—è UI –≤—ñ–¥ –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏.
UI —à–∞—Ä —Ç—ñ–ª—å–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —Ç–∞
–¥–µ–ª–µ–≥—É—î –≤—Å—é –æ–±—Ä–æ–±–∫—É –¥–æ core.analyzer.

Design Principles:
- –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –≤ UI (—Ç—ñ–ª—å–∫–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è)
- –ß—ñ—Ç–∫–µ —Ä–æ–∑–¥—ñ–ª–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥–∞–ª—å–Ω–æ—Å—Ç–µ–π
- User-friendly error handling
"""

import logging
import os
import socket
from typing import Dict, List, Tuple

import gradio as gr

from core.config import config
from core.analyzer import HybridAnalyzer, AnalysisResult

logger = logging.getLogger(__name__)


class GradioInterface:
    """
    Wrapper –¥–ª—è Gradio —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å —Å—É—Ç–Ω–æ—Å—Ç–µ–π.
    
    –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥: Stateful UI wrapper –Ω–∞–¥ stateless analyzer.
    –ó–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞–Ω –≤–∏–±—Ä–∞–Ω–∏—Ö —Å—É—Ç–Ω–æ—Å—Ç–µ–π –º—ñ–∂ –≤–∏–∫–ª–∏–∫–∞–º–∏.
    """
    
    def __init__(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑ –≥–ª–æ–±–∞–ª—å–Ω–æ—é –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é."""
        self.analyzer = HybridAnalyzer()
        self.config = config
        
        # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Å—Ç–∞–Ω: –≤—Å—ñ —Å—É—Ç–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ
        self.enabled_ukrainian = set(self.config.UKRAINIAN_ENTITIES.keys())
        self.enabled_presidio = set(self.config.PRESIDIO_PATTERN_ENTITIES.keys())
        
        logger.info("GradioInterface initialized")
    
    def _format_error(self, error: Exception) -> Tuple[str, str]:
        """
        –§–æ—Ä–º–∞—Ç—É—î –ø–æ–º–∏–ª–∫—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.
        
        User Experience: –ü—Ä–∏—Ö–æ–≤—É—î —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –¥–µ—Ç–∞–ª—ñ, –ø–æ–∫–∞–∑—É—î –∑—Ä–æ–∑—É–º—ñ–ª—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
        
        Args:
            error: Exception –æ–±'—î–∫—Ç
            
        Returns:
            Tuple –∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏ –¥–ª—è –æ–±–æ—Ö –ø–∞–Ω–µ–ª–µ–π –≤–∏–≤–æ–¥—É
        """
        error_message = f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(error)}"
        
        # –î–æ–¥–∞—î–º–æ –ø—ñ–¥–∫–∞–∑–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤–∏—Ö –ø–æ–º–∏–ª–æ–∫
        if "–ø–æ—Ä–æ–∂–Ω—ñ–π" in str(error).lower():
            error_message += "\n\nüí° –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"
        elif "–∑–∞–≤–µ–ª–∏–∫–∏–π" in str(error).lower():
            error_message += f"\n\nüí° –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: {config.MAX_TEXT_LENGTH} —Å–∏–º–≤–æ–ª—ñ–≤"
        elif "–º–æ–¥–µ–ª—å" in str(error).lower():
            error_message += "\n\nüí° –°–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É"
        
        return error_message, ""
    
    def analyze_text(self, text: str) -> Tuple[str, str]:
        """
        –û–±—Ä–æ–±–ª—è—î —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ analyzer —Ç–∞ —Ñ–æ—Ä–º–∞—Ç—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏.
        
        Workflow:
        1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ö–æ—á —è–∫—ñ—Å—å —Å—É—Ç–Ω–æ—Å—Ç—ñ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ
        2. –í–∏–∫–ª–∏–∫ analyzer –∑ –ø–æ—Ç–æ—á–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
        3. –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è UI
        
        Args:
            text: –¢–µ–∫—Å—Ç –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
            
        Returns:
            Tuple: (formatted_entities, anonymized_text)
        """
        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∞–∫—Ç–∏–≤–Ω—ñ —Å—É—Ç–Ω–æ—Å—Ç—ñ
            if not self.enabled_ukrainian and not self.enabled_presidio:
                return (
                    "‚ö†Ô∏è –ñ–æ–¥–Ω–∞ —Å—É—Ç–Ω—ñ—Å—Ç—å –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞.\n"
                    "–ü–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è' —ñ –≤–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –¥–µ—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.",
                    text
                )
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –∞–Ω–∞–ª—ñ–∑
            result: AnalysisResult = self.analyzer.analyze(
                text=text,
                ukrainian_entities=list(self.enabled_ukrainian),
                presidio_entities=list(self.enabled_presidio),
                conflict_strategy="priority"  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ priority-based resolution
            )
            
            # –§–æ—Ä–º–∞—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
            entities_display = self._format_entities_display(result)
            
            return entities_display, result.anonymized_text
            
        except Exception as e:
            logger.error(f"Analysis failed: {e}", exc_info=True)
            return self._format_error(e)
    
    def _format_entities_display(self, result: AnalysisResult) -> str:
        """
        –§–æ—Ä–º–∞—Ç—É—î –∑–Ω–∞–π–¥–µ–Ω—ñ —Å—É—Ç–Ω–æ—Å—Ç—ñ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è.
        
        UX Strategy: –°—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π, —á–∏—Ç–∞–±–µ–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥ –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏.
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É
            
        Returns:
            –§–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        """
        if result.entities_count == 0:
            return (
                "‚úÖ –°—É—Ç–Ω–æ—Å—Ç–µ–π –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ\n\n"
                "–¢–µ–∫—Å—Ç –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö –≤–∏–±—Ä–∞–Ω–∏—Ö —Ç–∏–ø—ñ–≤."
            )
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏
        header = (
            f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ —Å—É—Ç–Ω–æ—Å—Ç–µ–π: {result.entities_count}\n"
            f"{'=' * 60}\n\n"
        )
        
        # –ì—Ä—É–ø—É—î–º–æ –∑–∞ —Ç–∏–ø–∞–º–∏
        entities_by_type: Dict[str, List] = {}
        for entity in result.entities:
            if entity.entity_type not in entities_by_type:
                entities_by_type[entity.entity_type] = []
            entities_by_type[entity.entity_type].append(entity)
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –∫–æ–∂–Ω—É –≥—Ä—É–ø—É
        sections = []
        for entity_type, entities in sorted(entities_by_type.items()):
            # –û—Ç—Ä–∏–º—É—î–º–æ –æ–ø–∏—Å —Ç–∏–ø—É –∑ –∫–æ–Ω—Ñ—ñ–≥—É
            description = self._get_entity_description(entity_type)
            
            section_header = f"üìå {entity_type} ({description})"
            section_items = []
            
            for idx, entity in enumerate(sorted(entities, key=lambda x: x.start), 1):
                entity_text = result.original_text[entity.start:entity.end]
                item = (
                    f"   {idx}. '{entity_text}' "
                    f"[–ø–æ–∑–∏—Ü—ñ—è {entity.start}:{entity.end}, "
                    f"–≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å {entity.score:.0%}]"
                )
                section_items.append(item)
            
            sections.append(section_header + "\n" + "\n".join(section_items))
        
        return header + "\n\n".join(sections)
    
    def _get_entity_description(self, entity_type: str) -> str:
        """
        –û—Ç—Ä–∏–º—É—î –æ–ø–∏—Å —Å—É—Ç–Ω–æ—Å—Ç—ñ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó.
        
        Args:
            entity_type: –¢–∏–ø —Å—É—Ç–Ω–æ—Å—Ç—ñ
            
        Returns:
            –û–ø–∏—Å —Å—É—Ç–Ω–æ—Å—Ç—ñ
        """
        if entity_type in self.config.UKRAINIAN_ENTITIES:
            return self.config.UKRAINIAN_ENTITIES[entity_type].description
        elif entity_type in self.config.PRESIDIO_PATTERN_ENTITIES:
            return self.config.PRESIDIO_PATTERN_ENTITIES[entity_type].description
        return "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø"
    
    def update_settings(
        self,
        ukrainian_checkboxes: List[str],
        presidio_checkboxes: List[str]
    ) -> str:
        """
        –û–Ω–æ–≤–ª—é—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—É—Ç–Ω–æ—Å—Ç–µ–π.
        
        State Management: –ó–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞–Ω –≤ –ø–∞–º'—è—Ç—ñ –º—ñ–∂ –≤–∏–∫–ª–∏–∫–∞–º–∏ analyze.
        
        Args:
            ukrainian_checkboxes: –í–∏–±—Ä–∞–Ω—ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫—ñ —Å—É—Ç–Ω–æ—Å—Ç—ñ
            presidio_checkboxes: –í–∏–±—Ä–∞–Ω—ñ Presidio —Å—É—Ç–Ω–æ—Å—Ç—ñ
            
        Returns:
            –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        """
        self.enabled_ukrainian = set(ukrainian_checkboxes)
        self.enabled_presidio = set(presidio_checkboxes)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∑ –≥–ª–æ–±–∞–ª—å–Ω–∏–º –∫–æ–Ω—Ñ—ñ–≥–æ–º
        for entity_type in self.config.UKRAINIAN_ENTITIES:
            self.config.update_entity_state(
                entity_type, 
                entity_type in self.enabled_ukrainian
            )
        
        for entity_type in self.config.PRESIDIO_PATTERN_ENTITIES:
            self.config.update_entity_state(
                entity_type, 
                entity_type in self.enabled_presidio
            )
        
        total_enabled = len(self.enabled_ukrainian) + len(self.enabled_presidio)
        
        logger.info(
            f"Settings updated: {len(self.enabled_ukrainian)} NER, "
            f"{len(self.enabled_presidio)} Presidio"
        )
        
        return (
            f"‚úÖ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n"
            f"–ê–∫—Ç–∏–≤–æ–≤–∞–Ω–æ —Ç–∏–ø—ñ–≤ —Å—É—Ç–Ω–æ—Å—Ç–µ–π: {total_enabled}\n"
            f"‚Ä¢ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö NER: {len(self.enabled_ukrainian)}\n"
            f"‚Ä¢ Presidio patterns: {len(self.enabled_presidio)}"
        )
    
    def build_interface(self) -> gr.Blocks:
        """
        –°—Ç–≤–æ—Ä—é—î –ø–æ–≤–Ω–∏–π Gradio —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑ –≤–∫–ª–∞–¥–∫–∞–º–∏.
        
        UI Architecture:
        - Tab 1: –ê–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É (–æ—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è)
        - Tab 2: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (–≤–∏–±—ñ—Ä —Ç–∏–ø—ñ–≤ —Å—É—Ç–Ω–æ—Å—Ç–µ–π)
        
        Returns:
            Gradio Blocks —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        """
        with gr.Blocks(
            title="–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–µ—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó",
            theme=gr.themes.Soft(),
            css="""
                .entity-checkbox { margin: 5px 0; }
                .settings-column { padding: 10px; }
            """
        ) as interface:
            
            gr.Markdown(
                """
                # üõ°Ô∏è –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ —Å–∏—Å—Ç–µ–º–∞ –¥–µ—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
                
                **–ì—ñ–±—Ä–∏–¥–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥:** –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–Ω–∞ NER –º–æ–¥–µ–ª—å + Rule-based Presidio patterns
                
                –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏—è–≤–ª—è—î —Ç–∞ –∞–Ω–æ–Ω—ñ–º—ñ–∑—É—î –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –≤ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ–º—É —Ç–µ–∫—Å—Ç—ñ.
                """
            )
            
            # ============ –í–ö–õ–ê–î–ö–ê 1: –ê–ù–ê–õ–Ü–ó ============
            with gr.Tab("üîç –ê–Ω–∞–ª—ñ–∑ —Ç–µ–∫—Å—Ç—É"):
                gr.Markdown(
                    """
                    ### –Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:
                    1. –í—Å—Ç–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç —É –ø–æ–ª–µ –Ω–∏–∂—á–µ
                    2. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–î–µ—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏"
                    3. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –∑–Ω–∞–π–¥–µ–Ω—ñ —Å—É—Ç–Ω–æ—Å—Ç—ñ —Ç–∞ –∞–Ω–æ–Ω—ñ–º—ñ–∑–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
                    
                    üí° –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Ç–∏–ø–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—à—É–∫—É –Ω–∞ –≤–∫–ª–∞–¥—Ü—ñ "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"
                    """
                )
                
                analyze_btn = gr.Button(
                    "üöÄ –î–µ—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏",
                    variant="primary",
                    size="lg"
                )

                with gr.Row(equal_height=True):
                    with gr.Column(scale=1):
                        input_text = gr.Textbox(
                            label="–í—Ö—ñ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç",
                            placeholder=(
                                "–ü—Ä–∏–∫–ª–∞–¥:\n"
                                "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ –ø—Ä–∞—Ü—é—î –≤ –¢–û–í '–ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫'.\n"
                                "Email: ivan.petrenko@example.com\n"
                                "–¢–µ–ª–µ—Ñ–æ–Ω: +380501234567\n"
                                "IBAN: UA213223130000026007233566001"
                            ),
                            lines=12,
                            max_lines=20
                        )

                    with gr.Column(scale=1):
                        anonymized_output = gr.Textbox(
                            label="üîí –ê–Ω–æ–Ω—ñ–º—ñ–∑–æ–≤–∞–Ω–∏–π —Ç–µ–∫—Å—Ç",
                            lines=12,
                            show_copy_button=True,
                            interactive=False
                        )

                        entities_output = gr.Textbox(
                            label="üìã –ó–Ω–∞–π–¥–µ–Ω—ñ —Å—É—Ç–Ω–æ—Å—Ç—ñ",
                            lines=12,
                            show_copy_button=True,
                            interactive=False
                        )
                
                # –ü—Ä–∏–∫–ª–∞–¥–∏
                gr.Examples(
                    examples=[
                        [
                            "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ (ivan.petrenko@example.com) "
                            "–ø—Ä–∞—Ü—é—î –≤ –∫–æ–º–ø–∞–Ω—ñ—ó –¢–û–í '–ü—Ä–∏–≤–∞—Ç' –Ω–∞ –ø–æ—Å–∞–¥—ñ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞. "
                            "–ô–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω: +380501234567"
                        ],
                        [
                            "–†–∞—Ö—É–Ω–æ–∫ –¥–ª—è –æ–ø–ª–∞—Ç–∏: UA213223130000026007233566001\n"
                            "–ö–∞—Ä—Ç–∫–∞: 4111111111111111\n"
                            "–°—É–º–∞: 15000 –≥—Ä–Ω"
                        ],
                        [
                            "–ó—É—Å—Ç—Ä—ñ—á –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è 15 –±–µ—Ä–µ–∑–Ω—è 2024 —Ä–æ–∫—É –æ 14:30 "
                            "–∑–∞ –∞–¥—Ä–µ—Å–æ—é: –≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫, 22, –ö–∏—ó–≤"
                        ]
                    ],
                    inputs=input_text,
                    label="üìå –ü—Ä–∏–∫–ª–∞–¥–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"
                )
                
                # –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó
                analyze_btn.click(
                    fn=self.analyze_text,
                    inputs=[input_text],
                    outputs=[entities_output, anonymized_output]
                )
            
            # ============ –í–ö–õ–ê–î–ö–ê 2: –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ============
            with gr.Tab("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"):
                gr.Markdown(
                    """
                    ### –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∏–ø—ñ–≤ –¥–∞–Ω–∏—Ö –¥–ª—è –¥–µ—ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
                    
                    –í–∏–±–µ—Ä—ñ—Ç—å —è–∫—ñ —Ç–∏–ø–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö —Å–∏—Å—Ç–µ–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ —à—É–∫–∞—Ç–∏ —Ç–∞ –∞–Ω–æ–Ω—ñ–º—ñ–∑—É–≤–∞—Ç–∏.
                    –ó–º—ñ–Ω–∏ –∑–∞—Å—Ç–æ—Å–æ–≤—É—é—Ç—å—Å—è –≤—ñ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ "–ó–±–µ—Ä–µ–≥—Ç–∏".
                    """
                )
                
                with gr.Row(equal_height=True):
                    # ===== –ö–û–õ–û–ù–ö–ê 1: –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ NER =====
                    with gr.Column(scale=1, elem_classes="settings-column"):
                        gr.Markdown("### üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ NER –º–æ–¥–µ–ª—å")
                        gr.Markdown(
                            "*–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —ñ–º–µ–Ω–æ–≤–∞–Ω–∏—Ö —Å—É—Ç–Ω–æ—Å—Ç–µ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ "
                            "–≥–ª–∏–±–æ–∫–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è*"
                        )
                        
                        ukrainian_checks = gr.CheckboxGroup(
                            choices=[
                                (f"{key} - {cfg.description}", key)
                                for key, cfg in self.config.UKRAINIAN_ENTITIES.items()
                            ],
                            value=list(self.enabled_ukrainian),
                            label="–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø–∏ —Å—É—Ç–Ω–æ—Å—Ç–µ–π",
                            elem_classes="entity-checkbox"
                        )
                    
                    # ===== –ö–û–õ–û–ù–ö–ê 2: Presidio Patterns =====
                    with gr.Column(scale=1, elem_classes="settings-column"):
                        gr.Markdown("### üîç Presidio Pattern Detection")
                        gr.Markdown(
                            "*–†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–≥—É–ª—è—Ä–Ω–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤ "
                            "—Ç–∞ —à–∞–±–ª–æ–Ω—ñ–≤*"
                        )
                        
                        presidio_checks = gr.CheckboxGroup(
                            choices=[
                                (f"{key} - {cfg.description}", key)
                                for key, cfg in self.config.PRESIDIO_PATTERN_ENTITIES.items()
                            ],
                            value=list(self.enabled_presidio),
                            label="–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø–∏ —à–∞–±–ª–æ–Ω—ñ–≤",
                            elem_classes="entity-checkbox"
                        )
                
                # –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
                save_settings_btn = gr.Button(
                    "üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è",
                    variant="primary",
                    size="lg"
                )
                
                settings_status = gr.Textbox(
                    label="–°—Ç–∞—Ç—É—Å",
                    interactive=False,
                    lines=4
                )
                
                # –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó
                save_settings_btn.click(
                    fn=self.update_settings,
                    inputs=[ukrainian_checks, presidio_checks],
                    outputs=[settings_status]
                )
                
                # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
                gr.Markdown(
                    """
                    ---
                    ### üìñ –ü–æ—è—Å–Ω–µ–Ω–Ω—è
                    
                    **–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ NER –º–æ–¥–µ–ª—å** –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≥–ª–∏–±–æ–∫–µ –Ω–∞–≤—á–∞–Ω–Ω—è (—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∏) 
                    –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Å–∫–ª–∞–¥–Ω–∏—Ö –ø–∞—Ç–µ—Ä–Ω—ñ–≤ —É —Ç–µ–∫—Å—Ç—ñ. –ü—Ä–∞—Ü—é—î –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.
                    
                    **Presidio Patterns** –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –≤–∏—Ä–∞–∑–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ 
                    –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö (email, —Ç–µ–ª–µ—Ñ–æ–Ω–∏, –∫–∞—Ä—Ç–∫–∏ —Ç–æ—â–æ).
                    
                    **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:** –ê–∫—Ç–∏–≤—É–π—Ç–µ –æ–±–∏–¥–≤–∞ —Ç–∏–ø–∏ –¥–ª—è –Ω–∞–π–∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.
                    """
                )
        
        return interface

    def launch(self, **kwargs) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞—î Gradio —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
        
        Args:
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è demo.launch()
        """
        interface = self.build_interface()
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        launch_config = {
            "share": False,
            "server_name": "127.0.0.1",
            "server_port": 7860,
            "show_error": True
        }
        launch_config.update(kwargs)

        resolved_port = self._resolve_server_port(
            host=launch_config.get("server_name", "127.0.0.1"),
            requested_port=launch_config.get("server_port")
        )

        launch_config["server_port"] = resolved_port

        logger.info(
            "Launching Gradio interface on %s:%s",
            launch_config.get("server_name", "127.0.0.1"),
            launch_config.get("server_port") or "auto"
        )
        interface.launch(**launch_config)

    def _resolve_server_port(self, host: str, requested_port: int | None) -> int | None:
        """–ü—ñ–¥–±–∏—Ä–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏–π –ø–æ—Ä—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É Gradio."""
        candidates = []

        env_port = os.getenv("GRADIO_SERVER_PORT")
        if env_port:
            try:
                env_port_int = int(env_port)
                candidates.append(env_port_int)
            except ValueError:
                logger.warning(
                    "GRADIO_SERVER_PORT=%s –Ω–µ —î —á–∏—Å–ª–æ–º ‚Äî —ñ–≥–Ω–æ—Ä—É—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è",
                    env_port
                )

        if requested_port is not None:
            candidates.append(int(requested_port))

        default_start = 7860
        default_range = range(default_start, default_start + 10)
        for port in default_range:
            candidates.append(port)

        candidates.append(None)  # –î–æ–∑–≤–æ–ª—è—î–º–æ Gradio —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ –æ–±—Ä–∞—Ç–∏ –ø–æ—Ä—Ç

        seen = set()
        unique_candidates = []
        for candidate in candidates:
            if candidate not in seen:
                unique_candidates.append(candidate)
                seen.add(candidate)

        for candidate in unique_candidates:
            if candidate is None:
                logger.warning(
                    "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤—ñ–ª—å–Ω–∏–π –ø–æ—Ä—Ç —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ, –ø–µ—Ä–µ–¥–∞—î–º–æ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è Gradio"
                )
                return None

            if self._is_port_available(host, candidate):
                if requested_port is not None and candidate != requested_port:
                    logger.warning(
                        "–ü–æ—Ä—Ç %s –∑–∞–π–Ω—è—Ç–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ %s",
                        requested_port,
                        candidate,
                    )
                return candidate

        raise RuntimeError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—É –¥–ª—è –∑–∞–ø—É—Å–∫—É Gradio")

    @staticmethod
    def _is_port_available(host: str, port: int) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –≤—ñ–ª—å–Ω–∏–π –≤–∫–∞–∑–∞–Ω–∏–π –ø–æ—Ä—Ç."""
        normalized_host = host or "127.0.0.1"
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            try:
                sock.bind((normalized_host, port))
            except OSError:
                return False
        return True


def create_interface() -> GradioInterface:
    """
    Factory function –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É.
    
    Design Pattern: Factory –¥–ª—è —Å–ø—Ä–æ—â–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤ app.py
    
    Returns:
        –ù–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π GradioInterface
    """
    return GradioInterface()
